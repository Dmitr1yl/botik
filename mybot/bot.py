import logging
from telegram import Update, ChatMember
from telegram.ext import (filters, ApplicationBuilder, ContextTypes, CommandHandler, ConversationHandler,
                          MessageHandler, ChatMemberHandler)
from UserStatus import UserStatus
from config import BOT_TOKEN, ADMIN_ID, PROJECT_ID, DIALOGFLOW_CREDENTIALS
import db_connection
from google.cloud import dialogflow

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.WARNING  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: (DEBUG, INFO, WARNING, ERROR, CRITICAL)
)

"""
####### –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ #######
---> start - ü§ñ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
---> chat - üí¨ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
---> exit - üîö –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞
---> newchat - ‚è≠ –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π
---> stats - üìä –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
"""


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å –≤ "–æ–∂–∏–¥–∞–Ω–∏–∏", –µ—Å–ª–∏ –æ–Ω/–æ–Ω–∞ –µ—â–µ –Ω–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    :param update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :return: —Å—Ç–∞—Ç—É—Å USER_ACTION
    """
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç—Ç–æ—Ç ChatBot! –Ø —Å–æ–∑–¥–∞–Ω –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –ò–ò. ü§ñ\n–ù–∞–ø–∏—à–∏—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π.")

    # –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏–∏)
    user_id = update.effective_user.id
    db_connection.insert_user(user_id)

    return USER_ACTION

async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    """
    help_text = (
        "üõ†Ô∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "üë§ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/chat - –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/exit - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç\n\n"
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ò–ò:\n"
        "/chat_AI - –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –ò–ò\n"
        "/exit_AI - –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç —Å –ò–ò\n\n"
        "üìä –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)\n"
    )
    await update.message.reply_text(help_text)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    user_status = db_connection.get_user_status(user_id)
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}, —Å—Ç–∞—Ç—É—Å: {user_status}")

    if user_status == UserStatus.COUPLED:
        # –ù–∞–π—Ç–∏ ID –ø–∞—Ä—Ç–Ω—ë—Ä–∞
        other_user_id = db_connection.get_partner_id(user_id)
        logging.debug(f"ID –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–ª—è {user_id}: {other_user_id}")
        if other_user_id:
            await in_chat(update, other_user_id)
        else:
            logging.warning(f"–ü–∞—Ä—Ç–Ω—ë—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    else:
        await context.bot.send_message(chat_id=user_id, text="ü§ñ –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ.")


async def handle_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /chat, –Ω–∞—á–∏–Ω–∞—è –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∏—â–µ—Ç
    :param update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :return: None
    """
    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /chat –≤ —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_user_id = update.effective_user.id
    current_user_status = db_connection.get_user_status(user_id=current_user_id)

    if current_user_status == UserStatus.PARTNER_LEFT:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–ª–µ–Ω —Å–≤–æ–∏–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º (–æ–Ω –æ–±–Ω–æ–≤–∏–ª –±—ã —Å—Ç–∞—Ç—É—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ PARTNER_LEFT)
        db_connection.set_user_status(user_id=current_user_id, new_status=UserStatus.IDLE)

        return await start_search(update, context)
    elif current_user_status == UserStatus.IN_SEARCH:
        # –ü—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –æ–Ω —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ
        return await handle_already_in_search(update, context)
    elif current_user_status == UserStatus.COUPLED:
        # –î–≤–∞–∂–¥—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
        other_user = db_connection.get_partner_id(current_user_id)
        if other_user is not None:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø–∞—Ä–µ, –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å –µ–≥–æ/–µ–µ
            await context.bot.send_message(chat_id=current_user_id,
                                           text="ü§ñ –í—ã —É–∂–µ –≤ —á–∞—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /exit, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞.")
            return None
        else:
            return await start_search(update, context)
    elif current_user_status == UserStatus.IDLE:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ "–æ–∂–∏–¥–∞–Ω–∏–µ", –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
        return await start_search(update, context)


async def handle_not_in_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ
    :param update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :return: None
    """
    current_user_id = update.effective_user.id
    current_user_status = db_connection.get_user_status(user_id=current_user_id)

    if current_user_status in [UserStatus.IDLE, UserStatus.PARTNER_LEFT]:
        await context.bot.send_message(chat_id=current_user_id,
                                       text="ü§ñ –í—ã –Ω–µ –≤ —á–∞—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /chat, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return
    elif current_user_status == UserStatus.IN_SEARCH:
        await context.bot.send_message(chat_id=current_user_id,
                                       text="ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, –≤—ã –≤—Å–µ –µ—â–µ –≤ –ø–æ–∏—Å–∫–µ!")
        return


async def handle_already_in_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ
    :param update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :return: None
    """
    await context.bot.send_message(chat_id=update.effective_chat.id, text="ü§ñ –í—ã —É–∂–µ –≤ –ø–æ–∏—Å–∫–µ!")
    return


async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–ø–æ–∏—Å–∫" –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ/–µ–µ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :return: None
    """
    current_user_id = update.effective_chat.id

    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ "–ø–æ–∏—Å–∫"
    db_connection.set_user_status(user_id=current_user_id, new_status=UserStatus.IN_SEARCH)
    await context.bot.send_message(chat_id=current_user_id, text="ü§ñ –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

    # –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    other_user_id = db_connection.couple(current_user_id=current_user_id)
    # –ï—Å–ª–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, —É–≤–µ–¥–æ–º–∏—Ç—å –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if other_user_id is not None:
        await context.bot.send_message(chat_id=current_user_id, text="ü§ñ –í—ã –±—ã–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        await context.bot.send_message(chat_id=other_user_id, text="ü§ñ –í—ã –±—ã–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

    return


async def handle_exit_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /exit, –≤—ã—Ö–æ–¥—è –∏–∑ —á–∞—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ
    :param update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :return: None
    """
    await exit_chat(update, context)
    return


async def handle_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = str(update.effective_user.id)
    if user_id == ADMIN_ID:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_users_number, paired_users_number = db_connection.retrieve_users_number()
        total_messages, active_users, idle_users, most_active_user = db_connection.retrieve_detailed_statistics()

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
            f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users_number}\n"
            f"ü§ù –°–æ–µ–¥–∏–Ω—ë–Ω–Ω—ã—Ö –ø–∞—Ä: {paired_users_number}\n"
            f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
            f"üîé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø–æ–∏—Å–∫–µ: {active_users}\n"
            f"üí§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {idle_users}\n"
        )
        if most_active_user:
            response += (
                f"üèÜ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {most_active_user[0]} "
                f"(—Å–æ–æ–±—â–µ–Ω–∏–π: {most_active_user[1]})\n"
            )

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(chat_id=user_id, text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        await context.bot.send_message(chat_id=user_id, text=response)
    else:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        await context.bot.send_message(chat_id=user_id, text="‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

async def exit_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –í—ã—Ö–æ–¥–∏—Ç –∏–∑ —á–∞—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –æ–±–Ω–æ–≤–ª—è—è —Å—Ç–∞—Ç—É—Å –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    :param update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :return: –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ: True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ —á–∞—Ç–µ (–∏ –≤—ã—à–µ–ª), False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    current_user = update.effective_user.id
    if db_connection.get_user_status(user_id=current_user) != UserStatus.COUPLED:
        await context.bot.send_message(chat_id=current_user, text="ü§ñ –í—ã –Ω–µ –≤ —á–∞—Ç–µ!")
        return

    other_user = db_connection.get_partner_id(current_user)
    if other_user is None:
        return

    # –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–∞–∑—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
    db_connection.uncouple(user_id=current_user)

    await context.bot.send_message(chat_id=current_user, text="ü§ñ –ó–∞–≤–µ—Ä—à–∞–µ–º —á–∞—Ç...")
    await context.bot.send_message(chat_id=other_user,
                                   text="ü§ñ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /chat, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    await update.message.reply_text("ü§ñ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç.")

    return


async def exit_then_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /newchat, –≤—ã—Ö–æ–¥—è –∏–∑ —á–∞—Ç–∞ –∏ –Ω–∞—á–∏–Ω–∞—è –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —á–∞—Ç–µ
    :param update: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param context: –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
    :return: None
    """
    current_user = update.effective_user.id
    if db_connection.get_user_status(user_id=current_user) == UserStatus.IN_SEARCH:
        return await handle_already_in_search(update, context)
    # –ï—Å–ª–∏ exit_chat –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, —Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ —á–∞—Ç–µ –∏ —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª
    await exit_chat(update, context)
    # –ù–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ, –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫
    return await start_search(update, context)


async def in_chat(update: Update, other_user_id: int) -> None:
    """
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –¥—Ä—É–≥–æ–º—É.
    """
    try:
        logging.debug(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {update.effective_user.id} –∫ {other_user_id}")
        await update.effective_chat.copy_message(
            chat_id=other_user_id,
            message_id=update.message.message_id,
            protect_content=False
        )
        logging.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç {update.effective_user.id} –∫ {other_user_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("ü§ñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

def is_bot_blocked_by_user(update: Update) -> bool:
    new_member_status = update.my_chat_member.new_chat_member.status
    old_member_status = update.my_chat_member.old_chat_member.status
    if new_member_status == ChatMember.BANNED and old_member_status == ChatMember.MEMBER:
        return True
    else:
        return False


async def blocked_bot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if is_bot_blocked_by_user(update):
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
        user_id = update.effective_user.id
        user_status = db_connection.get_user_status(user_id=user_id)
        if user_status == UserStatus.COUPLED:
            other_user = db_connection.get_partner_id(user_id)
            db_connection.uncouple(user_id=user_id)
            await context.bot.send_message(chat_id=other_user, text="ü§ñ –í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ /chat, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        db_connection.remove_user(user_id=user_id)
        return ConversationHandler.END
    else:
        # API Telegram –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ—Ç–∞
        return USER_ACTION

async def start_chat_ai(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —á–∞—Ç —Å –ò–ò.
    """
    user_id = update.effective_user.id
    db_connection.set_user_status(user_id, UserStatus.CHAT_WITH_AI)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="ü§ñ –í—ã –Ω–∞—á–∞–ª–∏ —á–∞—Ç —Å –ò–ò. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!")
    return USER_CHAT_AI

async def handle_chat_ai(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ Dialogflow.
    """
    user_message = update.message.text
    session_client = dialogflow.SessionsClient.from_service_account_json(DIALOGFLOW_CREDENTIALS)
    session = session_client.session_path(PROJECT_ID, update.effective_user.id)

    # –ó–∞–ø—Ä–æ—Å –∫ Dialogflow
    text_input = dialogflow.TextInput(text=user_message, language_code="ru")
    query_input = dialogflow.QueryInput(text=text_input)
    response = session_client.detect_intent(session=session, query_input=query_input)

    # –û—Ç–≤–µ—Ç Dialogflow
    ai_response = response.query_result.fulfillment_text
    await context.bot.send_message(chat_id=update.effective_chat.id, text=ai_response)

async def exit_chat_ai(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —á–∞—Ç —Å –ò–ò.
    """
    user_id = update.effective_user.id
    db_connection.set_user_status(user_id, UserStatus.IDLE)
    await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text="ü§ñ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç —Å –ò–ò. –ù–∞–ø–∏—à–∏—Ç–µ /chat, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    return ConversationHandler.END

# –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
USER_ACTION = 0
USER_CHAT_AI = 1

if __name__ == '__main__':
    application = ApplicationBuilder().token(BOT_TOKEN).build()
    # –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞
    db_connection.create_db()

    # –°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ IDLE, –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω
    db_connection.reset_users_status()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            USER_ACTION: [
                ChatMemberHandler(blocked_bot_handler),
                MessageHandler(
                    (filters.TEXT | filters.ATTACHMENT) & ~ filters.COMMAND & ~filters.Regex("exit") & ~filters.Regex(
                        "chat")
                    & ~filters.Regex("newchat") & ~filters.Regex("stats"),
                    handle_message),
                CommandHandler("chat_AI", start_chat_ai),
                CommandHandler("help", handle_help),
                CommandHandler("chat", handle_chat),
                CommandHandler("exit", handle_exit_chat),
                CommandHandler("newchat", exit_then_chat),
                CommandHandler("stats", handle_stats),
            ],
            USER_CHAT_AI: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_chat_ai),
                CommandHandler("exit_AI", exit_chat_ai),
            ],
        },
        fallbacks=[MessageHandler(filters.TEXT, handle_not_in_chat)],
    )
    application.add_handler(conv_handler)
    application.run_polling()
